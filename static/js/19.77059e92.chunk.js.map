{"version":3,"sources":["../node_modules/@coreui/utils/src/get-color.js","views/charts/ChartBarSimple.js","views/widgets/WidgetsDropdown.js","../node_modules/@coreui/utils/src/deep-objects-merge.js","views/charts/ChartLineSimple.js"],"names":["getColor","rawProperty","element","document","body","property","style","getStyle","ChartBarSimple","props","backgroundColor","pointHoverBackgroundColor","dataPoints","label","attributes","pointed","defaultDatasets","data","barPercentage","categoryPercentage","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","yAxes","type","datasets","options","labels","defaultProps","WidgetsDropdown","sm","lg","color","header","text","footerSlot","ChartLineSimple","className","height","name","elements","line","tension","borderWidth","deepObjectsMerge","target","source","Object","keys","key","assign","borderColor","pointHoverColor","pointBackgroundColor","pointedOptions","offset","gridLines","zeroLineColor","ticks","fontSize","fontColor","min","Math","apply","max","point","radius","hitRadius","hoverRadius","straightOptions","computedDatasets","computedOptions"],"mappings":"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","file":"static/js/19.77059e92.chunk.js","sourcesContent":["import getStyle from './get-style'\r\n\r\nconst getColor = (rawProperty, element = document.body) => {\r\n  const property = `--${rawProperty}`\r\n  const style = getStyle(property, element)\r\n  return style ? style : rawProperty\r\n}\r\n\r\nexport default getColor\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from '@coreui/utils/src'\nimport { CChartBar } from '@coreui/react-chartjs'\n\nconst ChartBarSimple = props => {\n\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        backgroundColor: getColor(backgroundColor),\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n        label: label,\n        barPercentage: 0.5,\n        categoryPercentage: 1\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    }\n  })()\n\n  // render\n  return (\n    <CChartBar\n      {...attributes}\n      type=\"bar\"\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n}\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartBarSimple\n","import React from 'react';\n\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle\n} from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport ChartLineSimple from '../charts/ChartLineSimple';\nimport ChartBarSimple from '../charts/ChartBarSimple';\n\nconst WidgetsDropdown = () => {\n  // render\n  return (\n    <CRow>\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-primary\"\n          header=\"4\"\n          text=\"Membros\"\n          footerSlot={\n            <ChartLineSimple\n              pointed\n              className=\"c-chart-wrapper mt-3 mx-3\"\n              style={{height: '70px'}}\n              dataPoints={[65, 59, 84, 84, 51, 55, 40]}\n              pointHoverBackgroundColor=\"primary\"\n              label=\"Members\"\n              labels=\"months\"\n            />\n          }\n        >\n              <CIcon name=\"cil-user\"/>\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-info\"\n          header=\"142\"\n          text=\"Produtos Cadastrados\"\n          footerSlot={\n            <ChartLineSimple\n              pointed\n              className=\"mt-3 mx-3\"\n              style={{height: '70px'}}\n              dataPoints={[1, 18, 9, 17, 34, 22, 11]}\n              pointHoverBackgroundColor=\"info\"\n              options={{ elements: { line: { tension: 0.00001 }}}}\n              label=\"Members\"\n              labels=\"months\"\n            />\n          }\n        >\n              <CIcon name=\"cil-location-pin\"/>\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-warning\"\n          header=\"811\"\n          text=\"Itens em estoque\"\n          footerSlot={\n            <ChartLineSimple\n              className=\"mt-3\"\n              style={{height: '70px'}}\n              backgroundColor=\"rgba(255,255,255,.2)\"\n              dataPoints={[78, 81, 80, 45, 34, 12, 40]}\n              options={{ elements: { line: { borderWidth: 2.5 }}}}\n              pointHoverBackgroundColor=\"warning\"\n              label=\"Members\"\n              labels=\"months\"\n            />\n          }\n        >\n              <CIcon name=\"cil-settings\"/>\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-danger\"\n          header=\"103\"\n          text=\"Vendas esse mÃªs\"\n          footerSlot={\n            <ChartBarSimple\n              className=\"mt-3 mx-3\"\n              style={{height: '70px'}}\n              backgroundColor=\"rgb(250, 152, 152)\"\n              label=\"Members\"\n              labels=\"months\"\n            />\n          }\n        >\n              <CIcon name=\"cil-settings\"/>\n        </CWidgetDropdown>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n","const deepObjectsMerge = (target, source) => {\r\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\r\n  for (const key of Object.keys(source)) {\r\n    if (source[key] instanceof Object) {\r\n      Object.assign(source[key], deepObjectsMerge(target[key], source[key]))\r\n    }\r\n  }\r\n\r\n  // Join `target` and modified `source`\r\n  Object.assign(target || {}, source)\r\n  return target\r\n}\r\n\r\nexport default deepObjectsMerge\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils/src'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      type=\"line\"\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n"],"sourceRoot":""}