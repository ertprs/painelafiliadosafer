{"version":3,"sources":["redux/actions/simplifiedRegistration.js","views/pages/simplifiedRegistration/SimplifiedRegistration.js"],"names":["successMessage","success","type","payload","errorMessage","error","SimplifiedRegistration","dispatch","useDispatch","useSelector","state","SimplifiedRegistrationReducer","useState","name","email","password","password2","input","setInput","passwordIncorrect","setPasswordIncorrect","handleChangeInput","event","target","value","className","sm","md","lg","xl","onSubmit","preventDefault","a","axios","post","console","message","placeholder","title","onChange","required","onFocus","style","backgroundColor","borderColor","xs","color","to","show","closeButton"],"mappings":"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","file":"static/js/29.3957d8ef.chunk.js","sourcesContent":["\r\nimport axios from \"axios\";\r\n\r\nexport const registration = (data) => async (dispatch) => {\r\n  try {\r\n\r\n    await axios.post(\"\")\r\n    dispatch(successMessage(true));\r\n\r\n  } catch (err) {\r\n    console.error(err.message);\r\n    dispatch(errorMessage(true));\r\n  }\r\n}\r\n\r\nexport const successMessage = (success) => ({\r\n  type: \"SUCCESS\",\r\n  payload: {\r\n    success\r\n  }\r\n})\r\n\r\n\r\nexport const errorMessage = (error) => ({\r\n  type: \"ERROR\",\r\n  payload: {\r\n    error\r\n  }\r\n})","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport {\r\n  CAlert,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardGroup,\r\n  CCardHeader,\r\n  CCardTitle,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow,\r\n} from \"@coreui/react\";\r\n\r\nimport { registration } from \"../../../redux/actions/simplifiedRegistration\";\r\n\r\nconst SimplifiedRegistration = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { success, error } = useSelector(\r\n    (state) => state.SimplifiedRegistrationReducer\r\n  );\r\n\r\n  const [input, setInput] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    password2: \"\",\r\n  });\r\n\r\n  const [passwordIncorrect, setPasswordIncorrect] = useState(false);\r\n\r\n  const handleSubmitForm = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (input.password !== input.password2) {\r\n      setPasswordIncorrect(true);\r\n    } else {\r\n      dispatch(registration(input));\r\n    }\r\n  };\r\n\r\n  const handleChangeInput = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setInput({ ...input, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"c-app c-default-layout align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol sm=\"12\" md=\"12\" lg=\"8\" xl=\"8\">\r\n            <CCardGroup>\r\n              <CCard className=\"p-4\">\r\n                <CCardHeader>\r\n                  <CCardTitle>Cadastre-se</CCardTitle>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <CForm onSubmit={handleSubmitForm}>\r\n                    <CRow>\r\n                      <CInputGroup className=\"mb-3 mb-3 col-sm-12 col-md-6  col-lg-6 col-xs-6\">\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText>\r\n                            <CIcon name=\"cil-user\" />\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          placeholder=\"Nome\"\r\n                          title=\"Nome\"\r\n                          onChange={handleChangeInput}\r\n                          required\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3 col-sm-12 col-md-6  col-lg-6 col-xs-6\">\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText>@</CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput\r\n                          type=\"text\"\r\n                          name=\"email\"\r\n                          placeholder=\"Email\"\r\n                          title=\"Email\"\r\n                          onChange={handleChangeInput}\r\n                          required\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3 mb-3 col-sm-12 col-md-6  col-lg-6 col-xs-6\">\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText>\r\n                            <CIcon name=\"cil-lock-locked\" />\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          placeholder=\"Digite uma senha\"\r\n                          title=\"Digite uma senha\"\r\n                          onChange={handleChangeInput}\r\n                          required\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3 mb-3 col-sm-12 col-md-6  col-lg-6 col-xs-6\">\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText>\r\n                            <CIcon name=\"cil-lock-locked\" />\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput\r\n                          type=\"password\"\r\n                          name=\"password2\"\r\n                          placeholder=\"Digite a mesma senha novamente\"\r\n                          title=\"Digite a mesma senha novamente\"\r\n                          onChange={handleChangeInput}\r\n                          onFocus={() => setPasswordIncorrect(false)}\r\n                          style={\r\n                            passwordIncorrect\r\n                              ? {\r\n                                  backgroundColor: \"orange\",\r\n                                  borderColor: \"red\",\r\n                                }\r\n                              : {}\r\n                          }\r\n                        />\r\n                      </CInputGroup>\r\n                    </CRow>\r\n                    <CRow className=\"mt-2\">\r\n                      <CCol xs=\"12\">\r\n                        <CButton color=\"primary\" type=\"submit\" className=\"px-4\">\r\n                          Cadastrar\r\n                        </CButton>\r\n                        <Link to=\"/\">\r\n                          <CButton color=\"secondary\" className=\"px-4 ml-2\">\r\n                            Voltar\r\n                          </CButton>\r\n                        </Link>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n                <CCardFooter>\r\n                  <CAlert color=\"success\" show={success} closeButton>\r\n                    Cadastro realizado com sucesso!\r\n                  </CAlert>\r\n                  <CAlert color=\"danger\" show={error} closeButton>\r\n                    Ocorreu um erro em seu cadastro!\r\n                  </CAlert>\r\n                </CCardFooter>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimplifiedRegistration;\r\n"],"sourceRoot":""}